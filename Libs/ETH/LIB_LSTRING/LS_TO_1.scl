FUNCTION "LS_TO_1" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      OUT : Variant;
   END_VAR

   VAR_IN_OUT 
      IN : "t_LString";
   END_VAR

   VAR_TEMP 
      sTmp : String;
      boTmp : Bool;
      bTmp : Byte;
      cTmp : Char;
      wTmp : Word;
      dwTmp : DWord;
      lwTmp : LWord;
      siTmp : SInt;
      iTmp : Int;
      diTmp : DInt;
      usiTmp : USInt;
      uiTmp : UInt;
      udiTmp : UDInt;
      liTmp : LInt;
      uliTmp : ULInt;
      rTmp : Real;
      lrTmp : LReal;
   END_VAR


BEGIN
	(* Check for conversion to LString, in which case we simply write the LString *)
	IF TypeOf(#OUT) = t_LString THEN
	    VariantPut(SRC := #IN,
	               DST := #OUT);
	    RETURN;
	END_IF;
	
	
	(* Check for Empty LString, only Strings may be empty and are read as '' *)
	IF #IN.Len = 0 AND TypeOf(#OUT) <> String THEN
	    ENO := FALSE;
	    RETURN;
	END_IF;
	
	
	(* Convert the LString to a String first *)
	Chars_TO_Strg(Chars := #IN.Data,
	              Strg => #sTmp,
	              pChars := 0,
	              Cnt := #IN.Len);
	
	IF NOT ENO THEN
	    RETURN;
	END_IF;
	
	
	(* Convert the String to the appropriate type *)
	CASE TypeOf(#OUT) OF
	    String:
	        VariantPut(SRC := #sTmp,
	                   DST := #OUT);
	        
	    Byte:
	        #bTmp := STRING_TO_CHAR(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #bTmp,
	                   DST := #OUT);
	        
	    Char:
	        #cTmp := STRING_TO_CHAR(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #cTmp,
	                   DST := #OUT);
	        
	    Word:
	        #wTmp := STRING_TO_UINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #wTmp,
	                   DST := #OUT);
	        
	    DWord:
	        #dwTmp := STRING_TO_UDINT(#sTmp);
	        IF NOT ENO THEN
	            ENO := true;
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #dwTmp,
	                   DST := #OUT);
	        
	    LWord:
	        #lwTmp := STRING_TO_ULINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #lwTmp,
	                   DST := #OUT);
	        
	    SInt:
	        #siTmp := STRING_TO_SINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #siTmp,
	                   DST := #OUT);
	        
	    Int:
	        #iTmp := STRING_TO_INT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #iTmp,
	                   DST := #OUT);
	        
	    DInt:
	        #diTmp := STRING_TO_DINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #diTmp,
	                   DST := #OUT);
	        
	    USInt:
	        #usiTmp := STRING_TO_USINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #usiTmp,
	                   DST := #OUT);
	        
	    UInt:
	        #uiTmp := STRING_TO_UINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #uiTmp,
	                   DST := #OUT);
	        
	    UDInt:
	        #udiTmp := STRING_TO_UDINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #udiTmp,
	                   DST := #OUT);
	        
	    LInt:
	        #liTmp := STRING_TO_LINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #liTmp,
	                   DST := #OUT);
	        
	    ULInt:
	        #uliTmp := STRING_TO_ULINT(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #uliTmp,
	                   DST := #OUT);
	        
	    Real:
	        #rTmp := STRING_TO_REAL(#sTmp);
	        (* IF NOT ENO THEN
	            RETURN;
	        END_IF; *)
	        //doplneno
	        ENO := TRUE;
	       // RETURN;
	        
	        VariantPut(SRC := #rTmp,
	                   DST := #OUT);
	        
	    LReal:
	        #lrTmp := STRING_TO_LREAL(#sTmp);
	        IF NOT ENO THEN
	            RETURN;
	        END_IF;
	        
	        VariantPut(SRC := #lrTmp,
	                   DST := #OUT);
	        
	    ELSE
	        (* Invalid Datatype *)
	        ENO := FALSE;
	        RETURN;
	        
	END_CASE;
	
END_FUNCTION

